{"version":3,"file":"veebrate-app-11eb8425.js","sources":["../../js/frontend/node_modules/lit-html/lib/directive.js","../../js/frontend/node_modules/lit-html/lib/dom.js","../../js/frontend/node_modules/lit-html/lib/part.js","../../js/frontend/node_modules/lit-html/lib/template.js","../../js/frontend/node_modules/lit-html/lib/template-instance.js","../../js/frontend/node_modules/lit-html/lib/template-result.js","../../js/frontend/node_modules/lit-html/lib/parts.js","../../js/frontend/node_modules/lit-html/lib/default-template-processor.js","../../js/frontend/node_modules/lit-html/lib/template-factory.js","../../js/frontend/node_modules/lit-html/lib/render.js","../../js/frontend/node_modules/lit-html/lit-html.js","../../js/frontend/src/veebrate-app.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","// Import lit-html\nimport {html, render, nothing} from 'lit-html';\n\nnavigator.vibrate = navigator.vibrate || navigator.webkitVibrate || navigator.mozVibrate || navigator.msVibrate;\n\nconst inputHandler = (e) => {\n  update(\"SET_USERNAME\", e.target.value);\n};\n\nconst connectHandler = (e) => {\n  update(\"SET_CONN\");\n};\n\nconst startVibrateHandler = (e) => {\n  update(\"SEND_MESSAGE\", true);\n};\n\nconst endVibrateHandler = (e) => {\n  update(\"SEND_MESSAGE\", false);\n};\n\nconst selectHandler = (e) => {\n  update(\"SET_VIBRATE_SPEED\", e.target.value);\n};\n\nconst recipentHandler = (connectionID) => {\n  return () => {\n    update(\"SET_RECIPIENT\", connectionID);\n  }\n}\n\nconst resetHandler = () => {\n  update(\"CLOSE_EVENTBUS\");\n}\n\nconst startTemplate = (data) => html`\n<section class=\"hero is-fullheight\">\n  <div class=\"hero-body\">\n    <div class=\"container has-text-centered\">\n      <h1 class=\"title\">\n        Veebrate\n      </h1>\n      <h2 class=\"subtitle\">\n        A silly app to make your or another user's phone vibrate\n      </h2>\n      <h3 class=\"subtitle is-size-6\">\n        (Best experienced on Android or iPhone)\n      </h3>\n      <p class=\"is-size-6\">\n        Enter your username\n      </p>\n      <div class=\"field has-addons has-addons-centered\">\n        <div class=\"control\">\n          <input\n            class=\"input\"\n            type=\"text\"\n            name=\"username\"\n            @input=${inputHandler}\n          >\n        </div>\n        <div class=\"control\">\n          <button\n            class=\"button is-success${data.isLoading ? ' is-loading' : ''}\"\n            @click=${connectHandler}\n          >Confirm</button>\n        </div>\n      </div>\n      ${data.error.length\n        ? html`<p class=\"help is-danger\">You need to enter a username to continue</p>`\n        : nothing\n      }\n    </div>\n  </div>\n</section>\n`;\n\nconst listItemClasses = (data, user) => {\n  let classes = ['list-item'];\n  if (data.recipientID === user.connectionID) {\n    classes.push('is-active');\n  }\n  return  classes.join(' ');\n}\n\nconst formatVibrateSpeedText = ({vibrateSpeed, vibrateSpeedLimit}) => {\n  const base = vibrateSpeedLimit / 3;\n  if (vibrateSpeed === 0) {\n    return 'fastest';\n  } else if (vibrateSpeed < base) {\n    return 'fast';\n  } else if (vibrateSpeed >= base && vibrateSpeed < base * 2) {\n    return 'medium';\n  } else if (vibrateSpeed >= base * 2 && vibrateSpeed < vibrateSpeedLimit) {\n    return 'slow';\n  } else if (vibrateSpeed === vibrateSpeedLimit) {\n    return 'slowest';\n  }\n}\n\nconst mainTemplate = (data) => html`\n<section class=\"container is-fluid\">\n  <nav class=\"level\">\n    <div class=\"level-left\">\n      <div class=\"level-item has-text-centered\">\n        <p class=\"title\">Veebrate</p>\n      </div>\n    </div>\n    <div class=\"level-right\">\n      <div class=\"level-item has-text-centered\">\n        <button class=\"button is-white\" @click=\"${resetHandler}\">\n          <span class=\"icon\">\n            <i class=\"fas fa-sign-out-alt\"></i>\n          </span>\n          <span>Logout</span>\n        </button>\n      </div>\n    </div>\n  </nav>\n  <div class=\"level\">\n    <div class=\"level-left\">\n      <div class=\"level-item has-text-centered\">\n        <h2 class=\"subtitle\">Users online</h2>\n      </div>\n    </div>\n    <div class=\"level-right\">\n      <div class=\"level-item\">\n        <p><strong>Vibrate speed:</strong><span class=\"speed-text has-text-centered\">${formatVibrateSpeedText(data)}</span></p>\n        <div class=\"dropdown is-right is-hoverable\">\n          <div class=\"dropdown-trigger\">\n            <button class=\"button is-small\" aria-haspopup=\"true\" aria-controls=\"dropdown-menu6\">\n              <span class=\"icon is-small\"><i class=\"fas fa-cog\"></i></span>\n            </button>\n          </div>\n          <div class=\"dropdown-menu\" role=\"menu\">\n            <div class=\"dropdown-content\">\n              <div class=\"dropdown-item\">\n                <span>slow</span>\n                <input class=\"slider has-output is-fullwidth\" @change=\"${selectHandler}\" type=\"range\" min=\"0\" max=\"${data.vibrateSpeedLimit}\" value=\"${data.vibrateSpeed}\">\n                <span>fast</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <ul class=\"list is-hoverable\">\n    ${data.usersList.map((user) => html`\n      <li class=\"${listItemClasses(data, user)}\" @click=\"${recipentHandler(user.connectionID)}\">\n        <div class=\"level is-mobile\">\n          <div class=\"level-left\">\n            <div class=\"level-item\">\n              <span class=\"icon\"><i class=\"fas fa-user\"></i></span>\n            </div>\n            <div class=\"level-item\">\n              <p class=\"has-text-weight-bold\">${user.userName}</p>\n            </div>\n            ${data.connectionID === user.connectionID\n              ? html`<div class=\"level-item\"><p>(you)</p></div>`\n              : nothing\n            }\n          </div>\n          <div class=\"level-right\">\n            ${data.senderID === user.connectionID\n              ? html`<div class=\"level-item\"><span class=\"icon has-text-warning\"><i class=\"fas fa-arrow-down\"></i></span></div>`\n              : nothing\n            }\n            ${data.sending && data.recipientID === user.connectionID\n              ? html`<div class=\"level-item\"><span class=\"icon has-text-success\"><i class=\"fas fa-arrow-up\"></i></span></div>`\n              : nothing\n            }\n          </div>\n        </div>\n      </li>\n    `)}\n  </ul>\n</section>\n<section class=\"container is-fluid footer-container has-background-light\">\n  <footer class=\"footer\">\n  <div class=\"content\">\n    <div class=\"field\">\n      <div class=\"control\">\n        <button\n          ?disabled=${!data.recipientID.length}\n          class=\"button is-success is-fullwidth\"\n          @mousedown=\"${startVibrateHandler}\"\n          @mouseup=\"${endVibrateHandler}\"\n          @touchstart=\"${startVibrateHandler}\"\n          @touchend=\"${endVibrateHandler}\"\n          @touchcancel=\"${endVibrateHandler}\"\n        >SEND</button>\n      </div>\n    </div>\n  </div>\n  </footer>\n</section>\n`;\n\nconst view = (data) => html`\n<main>\n  ${data.isConnected\n    ? mainTemplate(data)\n    : startTemplate(data)\n  }\n</main>\n`;\n\nconst initState = {\n  userName: '',\n  isConnected: false,\n  isLoading: false,\n  error: '',\n  eventbus: null,\n  connectionID: '',\n  vibrateSpeed: 300,\n  recipientID: '',\n  senderID: '',\n  sending: false,\n  usersList: [],\n  timerID: null,\n  vibrateSpeedMin: 200,\n  vibrateSpeedLimit: 600,\n}\n\nlet store = {\n  state: initState,\n  actions: {\n    \"SET_USERNAME\": ({state}, userName) => {\n      state.userName = userName;\n    },\n    \"SET_CONN\": ({update, state}) => {\n      if (state.userName === '') {\n        state.error = 'You need to enter a username';\n      } else if (state.eventbus === null) {\n        state.isLoading = true;\n        let eventbus = new EventBus(`${window.location.origin}/eventbus`);\n        eventbus.onopen = (event) => {\n          if (state.error.length) {\n            update(\"SET_ERROR\", '');\n          }\n          eventbus.registerHandler('user.connected', (error, msg) => {\n            update(\"SET_CONN_RESPONSE\", {\n              isConnected: true,\n              connectionID: msg.body.connectionID,\n              users: msg.body.users\n            });\n          });\n          eventbus.registerHandler('user.messageOut', (error, msg) => {\n            update(\"SET_INCOMING_MESSAGE\", msg.body);\n          });\n          eventbus.send('user.connect', {\n            canVibrate: 'function' === typeof navigator.vibrate,\n            userName: state.userName\n          });\n        }\n        eventbus.onclose = (event) => {\n          update(\"RESET_STATE\");\n        }\n        eventbus.onerror = (event) => {\n          console.log('error', event);\n        }\n        state.eventbus = eventbus;\n      }\n    },\n    \"SET_ERROR\": ({state}, error) => {\n      state.error = error;\n    },\n    \"SET_CONN_STATUS\": ({state}, isConnected) => {\n      state.isConnected = isConnected;\n    },\n    \"SET_CONN_RESPONSE\": ({update, state}, {isConnected, connectionID, users}) => {\n      state.isLoading = !isConnected;\n      state.isConnected = isConnected;\n      state.connectionID = connectionID;\n      if (state.recipientID.length) {\n        const isCurrentRecipientConnected = users.some((user) => {\n          return state.recipientID === user.connectionID;\n        })\n        if (!isCurrentRecipientConnected) {\n          state.recipientID = '';\n        }\n      }\n      if (users.length > 1) {\n        const currentUserIndex = users.findIndex((user) => {\n          return user.connectionID === state.connectionID;\n        })\n        const currentUser = users[currentUserIndex];\n        users.splice(currentUserIndex, 1)\n        users.unshift(currentUser);\n        state.usersList = users;\n      } else if (users.length) {\n        state.usersList = users;\n      } else {\n        state.isConnected = false;\n        state.connectionID = '';\n        state.usersList = [];\n        update(\"SET_EVENTBUS\", null);\n      }\n    },\n    \"SEND_MESSAGE\": ({state}, vibrate) => {\n      let payload = {\n        recipientID: state.recipientID,\n        connectionID: state.connectionID,\n        vibrateSpeed: state.vibrateSpeed + state.vibrateSpeedMin,\n        vibrate\n      }\n      state.eventbus.send('user.messageIn', payload);\n      state.sending = vibrate;\n    },\n    \"SET_EVENTBUS\": ({state}, eventbus) => {\n      state.eventbus = eventbus;\n    },\n    \"SET_VIBRATE_SPEED\": ({state}, speed) => {\n      state.vibrateSpeed = (600 - speed);\n    },\n    \"SET_RECIPIENT\": ({state}, recipientID) => {\n      state.recipientID = recipientID;\n    },\n    \"SET_INCOMING_MESSAGE\": ({state}, message) => {\n      state.vibrate = message.vibrate;\n      if (state.vibrate) {\n        state.senderID = message.connectionID;\n        state.timerID = setInterval(() => {\n          navigator.vibrate(message.vibrateSpeed);\n        }, message.vibrateSpeed);\n      } else {\n        state.senderID = '';\n        clearInterval(state.timerID);\n        state.timerID = null;\n      }\n    },\n    \"CLOSE_EVENTBUS\": ({state}) => {\n      state.eventbus.close();\n    },\n    \"RESET_STATE\": () => {\n      return initState;\n    }\n  }\n}\n\nconst app = (store) => {\n  let state = Object.assign({}, store.state)\n  render(view(state), document.body);\n  return function updateHandler(action, data) {\n    let context = { update: updateHandler, state }\n    const response = store.actions[action].call(this, context, data);\n    if (response) {\n      state = Object.assign({}, response);\n    }\n    render(view(state), document.body);\n  }\n}\n\nconst update = app(store);\n"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","start","end","n","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","Template","[object Object]","result","element","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","this","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isPrimitive","value","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","v","t","setAttribute","_getValue","committer","directive","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","single","PropertyPart","super","eventOptionsSupported","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","getTemplateElement","render","firstChild","Object","assign","appendInto","navigator","vibrate","webkitVibrate","mozVibrate","msVibrate","inputHandler","target","connectHandler","startVibrateHandler","endVibrateHandler","selectHandler","resetHandler","startTemplate","isLoading","error","mainTemplate","vibrateSpeed","vibrateSpeedLimit","base","formatVibrateSpeedText","usersList","map","user","classes","recipientID","connectionID","listItemClasses","userName","senderID","sending","view","isConnected","initState","eventbus","timerID","vibrateSpeedMin","store","state","body","updateHandler","action","context","response","actions","app","EventBus","location","origin","onopen","registerHandler","msg","users","send","canVibrate","onclose","onerror","console","log","some","currentUserIndex","findIndex","currentUser","splice","unshift","payload","speed","message","setInterval","clearInterval","close"],"mappings":"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"}